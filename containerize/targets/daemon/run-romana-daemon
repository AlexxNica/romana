#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "${0##*/}: entrypoint for romana daemon container."
	echo "Options:"
	echo " -h or --help: print usage"
	echo " --etcd-endpoints: a comma-separated list of etcd endpoint URLs for the etcd cluster"
	echo " --initial-network: path to a json file describing the initial network topology"
	echo " --cloud: specify the cloud provider, for predefined initial config. Currently supported: aws"
	echo " --network-cidr-overrides: a comma-separated list of name=CIDR pairs, to replace predefined network CIDR values"
	echo " --debug: Turn on debug logging for romana daemon. (default: false. valid values: true, false)"
}

# Parse command-line options
etcd_endpoints=
initial_network=
cloud=
debug=false
network_cidr_overrides=
while [[ $1 == -* ]]; do
	# expand --foo=bar options
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--etcd-endpoints)
		etcd_endpoints="$2"
		shift 2
		;;
	--initial-network)
		initial_network="$2"
		shift 2
		;;
	--cloud)
		cloud="$2"
		shift 2
		;;
	--debug)
		debug="$2"
		shift 2
		;;
	--network-cidr-overrides)
		network_cidr_overrides="$2"
		shift 2
		;;
	*)
		echo "Unknown option '$1'"
		usage
		exit 1
		;;
	esac
done

usage_error() {
	if (($# < 1)); then
		internal_error "Call to usage_error without a message"
	fi
	echo "Error:" "$@"
	usage
	exit 1
}

internal_error() {
	echo "Internal Error:" "$@"
	exit 2
}

# Kubernetes HTTPS Service must be defined via envinronment variables
if ! [[ "$KUBERNETES_SERVICE_HOST" ]]; then
	usage_error "Unable to find Kubernetes API Server. Environment varible KUBERNETES_SERVICE_HOST not found"
fi
if ! [[ "$KUBERNETES_SERVICE_PORT_HTTPS" ]]; then
	usage_error "Unable to find Kubernetes API Server. Environment varible KUBERNETES_SERVICE_PORT_HTTPS not found"
fi

# Romana Daemon Service must be defined via envinronment variables
if ! [[ "$ROMANA_SERVICE_HOST" ]]; then
	usage_error "Unable to find Romana Service. Environment varible ROMANA_SERVICE_HOST not found"
fi
if ! [[ "$ROMANA_SERVICE_PORT_DAEMON" ]]; then
	usage_error "Unable to find Romana Service. Environment varible ROMANA_SERVICE_PORT_DAEMON not found"
fi

# Romana etcd is required. Use value from command-line, or look for environment variables from Kubernetes
if [[ "$etcd_endpoints" ]]; then
	: # ok
elif [[ "$ROMANA_ETCD_SERVICE_HOST" ]] && [[ "$ROMANA_ETCD_SERVICE_PORT_ETCD" ]]; then
	etcd_endpoints="$ROMANA_ETCD_SERVICE_HOST:$ROMANA_ETCD_SERVICE_PORT_ETCD"
else
	usage_error "Romana etcd endpoints must be provided."
fi

# Check if etcd is running. Execute a version query
printf "Checking if etcd is running..."
intervals=( 0 1 1 1 3 3 3 )
etcd_ready=0
for i in "${intervals[@]}"; do
	sleep "$i"
	if etcd_response=$(etcdctl --endpoints="$etcd_endpoints" cluster-health 2>/dev/null); then
		etcd_ready=1
		break
	fi
done
if ! (( etcd_ready )); then
	printf "error connecting to etcd: %s\n" "$etcd_response"
	exit 1
fi
printf "ok.\n"
printf "%s\n" "$etcd_response"

# Configure initial network
if [[ "$initial_network" ]]; then
	: # TODO: check if the file exists or support URLs.
elif [[ "$cloud" ]]; then
	case "$cloud" in
	aws)
		if ! mds_response=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone); then
			usage_error "Unable to determine initial network to apply."
		fi
		if ! [[ "$mds_response" ]]; then
			usage_error "Unable to determine initial network to apply."
		fi
		aws_region=${mds_response%?}
		if ! [[ -f "/var/lib/romana/initial-network/aws-${aws_region}.json" ]]; then
			internal_error "No predefined initial network for region $aws_region"
		fi
		initial_network="/var/lib/romana/initial-network/aws-${aws_region}.json"
		;;
	*)
		usage_error "Unknown value for --cloud: $cloud"
		;;
	esac
else
	# guess based on kubernetes service ip
	case "$KUBERNETES_SERVICE_HOST" in
	100.64.0.1) # kops default
		if ! mds_response=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone); then
			usage_error "Unable to determine initial network to apply."
		fi
		if ! [[ "$mds_response" ]]; then
			usage_error "Unable to determine initial network to apply."
		fi
		aws_region=${mds_response%?}
		if ! [[ -f "/var/lib/romana/initial-network/aws-${aws_region}.json" ]]; then
			internal_error "No predefined initial network for region $aws_region"
		fi
		initial_network="/var/lib/romana/initial-network/aws-${aws_region}.json"
		;;
	10.96.0.1) # kubeadm default
		initial_network=/var/lib/romana/initial-network/kubeadm-network.json
		;;
	*)
		usage_error "Unable to determine initial network to apply."
		;;
	esac
fi

# Validation functions
valid_bool() {
	if (($# != 1)); then
		internal_error "valid_bool(): expected 1 parameter, got $#"
	fi
	case "$1" in
	true|false)
		;;
	*)
		return 1
		;;
	esac
	return 0
}

valid_number() {
	if (($# != 1)); then
		internal_error "valid_number(): expected 1 parameter, got $#"
	fi
	if ! [[ "$1" ]]; then
		return 1
	fi
	if ! printf "%d\n" "$1" &> /dev/null; then
		return 1
	fi
	return 0
}

valid_cidr() {
	if (($# != 1)); then
		internal_error "valid_cidr(): expected 1 parameter, got $#"
	fi
	# Split w.x.y.z/p into pieces.
	local w x y z p r v
	IFS='./' read -r w x y z p r <<< "$1"
	if [[ "$r" ]]; then
		# Additional data in the CIDR. Return error.
		return 1
	fi
	# Check w, x, y, z are valid numbers from 0-255.
	error=0
	for v in "$w" "$x" "$y" "$z"; do
		if ! valid_number "$v"; then
			error=1
			break
		fi
		if ! ((v >= 0 && v < 256)); then
			error=1
			break
		fi
	done

	if ((error)); then
		return 1
	fi
	# Check p is some value between 0 and 32.
	if ! valid_number "$p"; then
		return 1
	fi
	if ! ((p >= 0 && p <= 32)); then
		return 1
	fi
	
	# Passed checks. return OK
	return 0
}

# Check if debug is valid
if [[ "$debug" ]]; then
	if ! valid_bool "$debug"; then
		usage_error "Expected 'true' or 'false' for --debug option. ('$debug')"
	fi
else
	debug=false
fi

# Apply network cidr overrides
if [[ "$network_cidr_overrides" ]]; then
	jq_args=()
	jq_filter=""
	filter_separator=""
	IFS="," read -ra overrides <<< "$network_cidr_overrides"
	i=0
	for override in "${overrides[@]}"; do
		IFS="=" read -r name cidr rest <<< "$override"
		if [[ "$rest" ]]; then
			internal_error "problem parsing override '$override': '$rest' after override expression"
		fi
		if ! [[ "$name" ]]; then
			internal_error "problem parsing override '$override': empty name"
		fi
		if ! [[ "$cidr" ]]; then
			internal_error "problem parsing override '$override': empty cidr"
		fi
		if ! valid_cidr "$cidr"; then
			internal_error "problem parsing override '$override': invalid CIDR"
		fi
		# validation passed. add to jq command
		((i++))
		jq_args+=( --arg "cidr$i" "$cidr" )
		# shellcheck disable=SC2016
		jq_filter+="${filter_separator}"'(.networks[] | select(.name=="'"$name"'") | .cidr) |= $cidr'"$i"
		filter_separator=" | "
	done
	# run jq
	jq_output=/var/lib/romana/initial-network/initial-network.json
	if ! jq -r "${jq_args[@]}" "$jq_filter" < "$initial_network" > "$jq_output"; then
		internal_error "failed to apply network overrides: jq_args=( ${jq_args[*]} ) jq_filter='$jq_filter'"
	fi
	initial_network="$jq_output"
fi

printf "Launching Romana Daemon\n"
if [[ "$debug" == "true" ]]; then
    export RLOG_LOG_LEVEL="DEBUG"
    export RLOG_TRACE_LEVEL="9"
    export RLOG_CALLER_INFO="y"
fi
exec /usr/local/bin/romanad -host 0.0.0.0 -etcd-endpoints="$etcd_endpoints" -initial-topology-file="$initial_network"
